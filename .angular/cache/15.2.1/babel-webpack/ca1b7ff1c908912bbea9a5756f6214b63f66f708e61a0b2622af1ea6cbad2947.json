{"ast":null,"code":"import { BehaviorSubject, of, Subject } from 'rxjs';\nimport { COUNTRIES } from './countries';\nimport { debounceTime, delay, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst compare = (v1, v2) => v1 < v2 ? -1 : v1 > v2 ? 1 : 0;\nfunction sort(countries, column, direction) {\n  if (direction === '' || column === '') {\n    return countries;\n  } else {\n    return [...countries].sort((a, b) => {\n      const res = compare(a[column], b[column]);\n      return direction === 'asc' ? res : -res;\n    });\n  }\n}\nfunction matches(country, term, pipe) {\n  return country.name.toLowerCase().includes(term.toLowerCase()) || pipe.transform(country.area).includes(term) || pipe.transform(country.population).includes(term);\n}\nexport class CountryService {\n  constructor(pipe) {\n    this.pipe = pipe;\n    this._loading$ = new BehaviorSubject(true);\n    this._search$ = new Subject();\n    this._countries$ = new BehaviorSubject([]);\n    this._total$ = new BehaviorSubject(0);\n    this._state = {\n      page: 1,\n      pageSize: 10,\n      searchTerm: '',\n      sortColumn: '',\n      sortDirection: ''\n    };\n    this._search$.pipe(tap(() => this._loading$.next(true)), debounceTime(200), switchMap(() => this._search()), delay(200), tap(() => this._loading$.next(false))).subscribe(result => {\n      this._countries$.next(result.countries);\n      this._total$.next(result.total);\n    });\n    this._search$.next();\n  }\n  get countries$() {\n    return this._countries$.asObservable();\n  }\n  get total$() {\n    return this._total$.asObservable();\n  }\n  get loading$() {\n    return this._loading$.asObservable();\n  }\n  get page() {\n    return this._state.page;\n  }\n  get pageSize() {\n    return this._state.pageSize;\n  }\n  get searchTerm() {\n    return this._state.searchTerm;\n  }\n  set page(page) {\n    this._set({\n      page\n    });\n  }\n  set pageSize(pageSize) {\n    this._set({\n      pageSize\n    });\n  }\n  set searchTerm(searchTerm) {\n    this._set({\n      searchTerm\n    });\n  }\n  set sortColumn(sortColumn) {\n    this._set({\n      sortColumn\n    });\n  }\n  set sortDirection(sortDirection) {\n    this._set({\n      sortDirection\n    });\n  }\n  _set(patch) {\n    Object.assign(this._state, patch);\n    this._search$.next();\n  }\n  _search() {\n    const {\n      sortColumn,\n      sortDirection,\n      pageSize,\n      page,\n      searchTerm\n    } = this._state;\n    // 1. sort\n    let countries = sort(COUNTRIES, sortColumn, sortDirection);\n    // 2. filter\n    countries = countries.filter(country => matches(country, searchTerm, this.pipe));\n    const total = countries.length;\n    // 3. paginate\n    countries = countries.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\n    return of({\n      countries,\n      total\n    });\n  }\n}\nCountryService.ɵfac = function CountryService_Factory(t) {\n  return new (t || CountryService)(i0.ɵɵinject(i1.DecimalPipe));\n};\nCountryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CountryService,\n  factory: CountryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","of","Subject","COUNTRIES","debounceTime","delay","switchMap","tap","compare","v1","v2","sort","countries","column","direction","a","b","res","matches","country","term","pipe","name","toLowerCase","includes","transform","area","population","CountryService","constructor","page","pageSize","searchTerm","sortColumn","sortDirection","_search$","_loading$","next","_search","subscribe","result","_countries$","_total$","total","countries$","asObservable","total$","loading$","_state","_set","patch","Object","assign","filter","length","slice","factory","providedIn"],"sourceRoot":"","sources":["D:\\ALP_PROJECTS\\ZyloMileTech\\MainFrontend\\src\\app\\researches-data\\country.service.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/adjacent-overload-signatures */\r\nimport { Injectable, PipeTransform } from '@angular/core';\r\n\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\n\r\nimport { Country } from './country';\r\nimport { COUNTRIES } from './countries';\r\nimport { DecimalPipe } from '@angular/common';\r\nimport { debounceTime, delay, switchMap, tap } from 'rxjs/operators';\r\nimport { SortColumn, SortDirection } from './sortable.directive';\r\n\r\ninterface SearchResult {\r\n\tcountries: Country[];\r\n\ttotal: number;\r\n}\r\n\r\ninterface State {\r\n\tpage: number;\r\n\tpageSize: number;\r\n\tsearchTerm: string;\r\n\tsortColumn: SortColumn;\r\n\tsortDirection: SortDirection;\r\n}\r\n\r\nconst compare = (v1: string | number, v2: string | number) => (v1 < v2 ? -1 : v1 > v2 ? 1 : 0);\r\n\r\nfunction sort(countries: Country[], column: SortColumn, direction: string): Country[] {\r\n\tif (direction === '' || column === '') {\r\n\t\treturn countries;\r\n\t} else {\r\n\t\treturn [...countries].sort((a, b) => {\r\n\t\t\tconst res = compare(a[column], b[column]);\r\n\t\t\treturn direction === 'asc' ? res : -res;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n\r\nfunction matches(country: Country, term: string, pipe: PipeTransform) {\r\n\treturn (\r\n\t\tcountry.name.toLowerCase().includes(term.toLowerCase()) ||\r\n\t\tpipe.transform(country.area).includes(term) ||\r\n\t\tpipe.transform(country.population).includes(term)\r\n\t);\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CountryService {\r\n\tprivate _loading$ = new BehaviorSubject<boolean>(true);\r\n\tprivate _search$ = new Subject<void>();\r\n\tprivate _countries$ = new BehaviorSubject<Country[]>([]);\r\n\tprivate _total$ = new BehaviorSubject<number>(0);\r\n\t\r\n\r\n\tprivate _state: State = {\r\n\t\tpage: 1,\r\n\t\tpageSize: 10,\r\n\t\tsearchTerm: '',\r\n\t\tsortColumn: '',\r\n\t\tsortDirection: '',\r\n\t};\r\n\r\n\tconstructor(private pipe: DecimalPipe) {\r\n\t\tthis._search$\r\n\t\t\t.pipe(\r\n\t\t\t\ttap(() => this._loading$.next(true)),\r\n\t\t\t\tdebounceTime(200),\r\n\t\t\t\tswitchMap(() => this._search()),\r\n\t\t\t\tdelay(200),\r\n\t\t\t\ttap(() => this._loading$.next(false)),\r\n\t\t\t)\r\n\t\t\t.subscribe((result) => {\r\n\t\t\t\tthis._countries$.next(result.countries);\r\n\t\t\t\tthis._total$.next(result.total);\r\n\t\t\t});\r\n\r\n\t\tthis._search$.next();\r\n\t}\r\n\r\n\tget countries$() {\r\n\t\treturn this._countries$.asObservable();\r\n\t}\r\n\tget total$() {\r\n\t\treturn this._total$.asObservable();\r\n\t}\r\n\tget loading$() {\r\n\t\treturn this._loading$.asObservable();\r\n\t}\r\n\tget page() {\r\n\t\treturn this._state.page;\r\n\t}\r\n\tget pageSize() {\r\n\t\treturn this._state.pageSize;\r\n\t}\r\n\tget searchTerm() {\r\n\t\treturn this._state.searchTerm;\r\n\t}\r\n\r\n\tset page(page: number) {\r\n\t\tthis._set({ page });\r\n\t}\r\n\tset pageSize(pageSize: number) {\r\n\t\tthis._set({ pageSize });\r\n\t}\r\n\tset searchTerm(searchTerm: string) {\r\n\t\tthis._set({ searchTerm });\r\n\t}\r\n\tset sortColumn(sortColumn: SortColumn) {\r\n\t\tthis._set({ sortColumn });\r\n\t}\r\n\tset sortDirection(sortDirection: SortDirection) {\r\n\t\tthis._set({ sortDirection });\r\n\t}\r\n\r\n\tprivate _set(patch: Partial<State>) {\r\n\t\tObject.assign(this._state, patch);\r\n\t\tthis._search$.next();\r\n\t}\r\n\r\n\tprivate _search(): Observable<SearchResult> {\r\n\t\tconst { sortColumn, sortDirection, pageSize, page, searchTerm } = this._state;\r\n\r\n\t\t// 1. sort\r\n\t\tlet countries = sort(COUNTRIES, sortColumn, sortDirection);\r\n\r\n\t\t// 2. filter\r\n\t\tcountries = countries.filter((country) => matches(country, searchTerm, this.pipe));\r\n\t\tconst total = countries.length;\r\n\r\n\t\t// 3. paginate\r\n\t\tcountries = countries.slice((page - 1) * pageSize, (page - 1) * pageSize + pageSize);\r\n\t\treturn of({ countries, total });\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}